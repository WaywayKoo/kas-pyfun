{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Hey, my name is William, I am the creator of this website. In this website you can learn about some basic fundamentals about python. This website is for people who have no idea about how to code. The school personal project, my dream is to create a platform that allows people to get free learning resources about coding. My tutorial contains a code and an output, feel free to copy my code and play around with it. There is a note box below each example, you can open those up and I have noted down some important concepts to learn.","title":"Introduction"},{"location":"#home","text":"Hey, my name is William, I am the creator of this website. In this website you can learn about some basic fundamentals about python. This website is for people who have no idea about how to code. The school personal project, my dream is to create a platform that allows people to get free learning resources about coding. My tutorial contains a code and an output, feel free to copy my code and play around with it. There is a note box below each example, you can open those up and I have noted down some important concepts to learn.","title":"Home"},{"location":"about/","text":"About Who am I ? Hello everyone, my name is William. I am currently a highschool student from Kaohsiung American School. I live in Tainan, Taiwan, and I am really passionate about coding. The school personal project is to allow students to develop our own interest and learn through the process of development. I have created this website all by myself using the material theme in mkdocs. To explain why I am passionate about coding, I will need to talk about my childhood. I really enjoyed watching my aunt playing video games when I was young. I am surprised by how people can control the game character just by simply pressing the keyboard. My aunt used to play a lot of problem solving and RPG games which I think was awesome. The favorite RPG game is called \u4e0a\u53e4\u795e\u5668, it is a single player game where you walk around the city and complete different missions, you will gain power by fighting monster throughout your journey. The reason why I enjoy RPG games is because the different action you make in the game will impact the ending of the game. Taking Undertale, the best PC game in 2015, as an example. Every action you take in the game will impact your \u201cLOVE\u201d and \u201cEXP\u201d which ultimentaly lead to a Genocide ending or a True Pacifist ending. This kind of real time interaction with players is what makes RPGs so attractive, every single character in the game have their own personalities and characteristics. In my words, they have soul Due to the passion in video games, I want to create one of my own. In order to do so I have to learn programming, as it makes my mom happy because she thinks I finally find a hobby that is useful. I have found coding to be not as interesting as I originally thought it would be when I get into formal programming class, it is not as fancy as it is shown in movies. Coding is like math combined with logic, my brain hurts when I have to do lots of calculations, I soon want to quit. My parents don\u2019t want me to quit and force me to try harder, and after more and more practice and years of learning, I have again found programming fun. Programming is fun because you can design your own dreams with it. When you are used to all the fundamentals, you can start designing some bigger projects, which is where the fun parts come in.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#who-am-i","text":"Hello everyone, my name is William. I am currently a highschool student from Kaohsiung American School. I live in Tainan, Taiwan, and I am really passionate about coding. The school personal project is to allow students to develop our own interest and learn through the process of development. I have created this website all by myself using the material theme in mkdocs. To explain why I am passionate about coding, I will need to talk about my childhood. I really enjoyed watching my aunt playing video games when I was young. I am surprised by how people can control the game character just by simply pressing the keyboard. My aunt used to play a lot of problem solving and RPG games which I think was awesome. The favorite RPG game is called \u4e0a\u53e4\u795e\u5668, it is a single player game where you walk around the city and complete different missions, you will gain power by fighting monster throughout your journey. The reason why I enjoy RPG games is because the different action you make in the game will impact the ending of the game. Taking Undertale, the best PC game in 2015, as an example. Every action you take in the game will impact your \u201cLOVE\u201d and \u201cEXP\u201d which ultimentaly lead to a Genocide ending or a True Pacifist ending. This kind of real time interaction with players is what makes RPGs so attractive, every single character in the game have their own personalities and characteristics. In my words, they have soul Due to the passion in video games, I want to create one of my own. In order to do so I have to learn programming, as it makes my mom happy because she thinks I finally find a hobby that is useful. I have found coding to be not as interesting as I originally thought it would be when I get into formal programming class, it is not as fancy as it is shown in movies. Coding is like math combined with logic, my brain hurts when I have to do lots of calculations, I soon want to quit. My parents don\u2019t want me to quit and force me to try harder, and after more and more practice and years of learning, I have again found programming fun. Programming is fun because you can design your own dreams with it. When you are used to all the fundamentals, you can start designing some bigger projects, which is where the fun parts come in.","title":"Who am I ?"},{"location":"python_1/","text":"Learn Datatypes There are three data types in Python Types Description int Int, short for integer. Whole number, any number without decimal point. float Floating-point numbers with up to 17 decimal points. str Str, String, words in general. Written inside quote. boolean True or False. Often use as a switch. Tip Learn the basics, but don't be scared to explore. Coding is all about exploring String and Print #1 Basics Code 1 2 3 4 5 6 print ( \"Hello world\" ) print ( \"My\" ) print ( \"Name\" ) print ( \"Is\" ) print () print ( \"Bob\" ) Output Hello world My Name Is Bob Note print() is used to display messages #2 adding string Code 1 2 print ( \"Hello\" + \" world\" ) print ( \"Hello\" , \"world\" ) Output Hello world Hello world Note \",\" and \"+\" and combine two string together. #3 Backslash Code 1 2 3 4 5 print ( \"Hello, world\" ) print ( 'Hello, world' ) print ( \"What's up\" ) print ( 'What \\' s up' ) print ( ' \\\\ ' ) Output Hello, world Hello, world What's up What's up \\ Note Double quote(\"\") and Single quote('') both work. Backslash is called an escape character. Computer will escape the next charater when backslash is used. #4 Backslash-n Code 1 2 3 4 5 print ( \"Hello, \\n world\" ) print ( 'Hello, \\t world' ) print ( 'Hello, \\b world' ) print ( \" \\n \" ) print ( \" \\\\\\\\ \" ) Output Hello, world Hello, world Hello,world \\\\ Note Code Result \\n New line \\t Tab \\\\ Backslash \\b Backspace Numbers and Calculations #1 (+, -, *, /) Code 1 2 3 4 5 print ( 2 + 2 ) print ( 2 - 2 ) print ( 2 * 2 ) print ( 2 / 2 ) print ( 2 // 2 ) Output 4 0 4 1.0 1 Note Code Description + Addition - Subtraction * Multiplication / Division // Floor division ** Exponentiation % Modulus #2 Remainder Code 1 2 3 print ( 7 % 2 ) print ( 8 % 3 ) print ( 10 % 6 ) Output 1 2 4 Tip Follows the PEMDAS rule. 1.) P : Parentheses 2.) E : Exponents 3.) MD : Multiplication and Division 4.) AS : Addition and Subtraction Tip Using the type function can allow you know the data type of the given data. #5 difference between / and // Code 1 2 3 4 print ( type ( 10.0 // 2 )) print ( type ( 10 // 2 )) print ( type ( 10.0 // 3 )) print ( type ( 10 // 3 )) Output <class 'int'> <class 'int'> <class 'int'> <class 'int'> Variables So first of all, what are variables? Variable is a memory location to store datas. Think of variable as a box, and you can put any thing inside the box. You can later on call certain data by using the variable you created. Variable is a great tool to make your code look more simple. #1 Basics Code 1 2 3 4 a = 10 print ( a ) b = \"10\" print ( b ) Output 10 10 Tip Good variable name is important while working in a team. Always get in a good habit of using good variable name. A good variable name needs to follow the following: Clear and Concise No special character No conflict with Python fuctions(sum, print, True...) #2 setting Code 1 2 3 4 a = 10 print ( a ) a = \"100\" print ( a ) Output 10 100 #3 Calling Var Code 1 2 3 a = 10 b = 20 print ( a + b ) Output 30 #4 Adding value Code 1 2 3 4 5 6 a = 10 a = a + 10 b = 10 b += 10 print ( a ) print ( b ) Output 20 20 Note Code Description += Addition -= Subtraction *= Multiplication /= Division //= Floor division **= Exponentiation %= Modulus #5 Swap Code 1 2 3 4 5 6 7 8 a = \"apple\" b = \"pineapple\" temp = b b = a a = temp print ( \"a\" , a ) print ( \"b\" , b ) Output a pineapple b apple Note the variable temp are used as a transition block. #6 Setting multiple var Code 1 2 3 4 a , b = \"1\" , \"2\" a , b = int ( a ), int ( b ) print ( \"a\" , type ( a )) print ( \"b\" , b ( b )) *Output a <class 'int'> b <class 'int'> #7 Swaping Value Code 1 2 3 4 a , b = 1 , 2 a , b = b , a print ( \"a\" , a ) print ( \"b\" , b ) Output a 2 b 1 Math #1 Rounding Important The import function is to access to code from another module. This rounding method only treats number that ends with x.5. * Even: round down * Odd: round down Code 1 2 3 4 5 6 7 8 9 10 11 12 import math a = 10.5 b = 9.5 print ( round ( a )) print ( round ( b )) print ( \"------------\" ) print ( math . floor ( a )) print ( math . floor ( b )) print ( \"------------\" ) print ( math . ceil ( a )) print ( math . ceil ( b )) print ( \"------------\" ) Output 10 10 ------------ 10 9 ------------ 11 10 ------------ Note Banker's rounding This rounding method only treats number that ends with x.5. * Even: round down * Odd: round down #2 Rounding to certain decimal point Code 1 2 3 4 5 6 7 8 9 10 11 12 import math divider = '-' * 30 x = 6.494949494949494949 print ( divider ) print ( 'round to int' , round ( x )) print ( 'round to 2 decimal point' , round ( x , 2 )) print ( 'round to 4 decimal point' , round ( x , 4 )) print ( 'round to 6 decimal point' , round ( x , 6 )) print ( divider ) print ( 'round up' , math . ceil ( x )) print ( divider ) print ( 'round down' , math . floor ( x )) Output ------------------------------ round to int 7 round to 2 decimal point 7.49 round to 4 decimal point 7.4934 round to 6 decimal point 7.4934 ------------------------------ round up 8 ------------------------------ round down 7 #3 Remainder vs Module Code 1 2 3 4 5 6 7 8 9 10 11 12 import math print ( 7 % 3 ) print ( math . remainder ( 7 , 3 )) print ( \"------------------------------\" print ( - 7 % 3 ) print ( math . remainder ( - 7 , 3 )) print ( \"------------------------------\" print ( 7 % - 3 ) print ( math . remainder ( 7 , - 3 )) print ( \"------------------------------\" ) print ( - 7 % - 3 ) print ( math . remainder ( - 7 , - 3 )) Output 1 1.0 2 -1.0 -2 1.0 -1 -1.0 #4 Other Functions Code 1 2 3 4 5 6 7 8 9 10 11 12 import math print ( 7 % 3 ) print ( math . remainder ( 7 , 3 )) print ( \"------------------------------\" print ( - 7 % 3 ) print ( math . remainder ( - 7 , 3 )) print ( \"------------------------------\" print ( 7 % - 3 ) print ( math . remainder ( 7 , - 3 )) print ( \"------------------------------\" ) print ( - 7 % - 3 ) print ( math . remainder ( - 7 , - 3 )) Output 1 1.0 2 -1.0 -2 1.0 -1 -1.0 Important % and math.remainder is different when one of the number are negative. x//y = math.floor(x/y) Abstract math.sqrt(a) = a ** 0.5 pow(a,b) = a ** b Formating String #1 Basics Code 1 2 3 4 5 6 7 8 x = 10 y = 9 print ( ' %s + %s = %s ' % ( x , y , x + y )) print ( ' {} + {} = {} ' . format ( x , y , x + y )) print ( ' {2} + {1} = {0} ' . format ( x + y , y , x )) print ( f ' { x } + { y } = { x + y } ' ) print ( x , \"+\" , y , \"=\" , x + y ) Output 10 + 9 = 19 10 + 9 = 19 10 + 9 = 19 10 + 9 = 19 10 + 9 = 19 Bug You can not combine String and Int together by using (+), but (,) will work. Code: 1 2 3 4 print ( 1 + \"1\" ) print ( 1 , \"1\" ) print ( \"1\" + \"1\" ) print ( 1 + 1 ) Output: TypeError 1 1 11 2 #2 Basics Code 1 2 3 4 5 6 7 8 9 10 11 a = \"10\" b = \"apple iS APPLE. how about pineapple.\" print ( \"a.title():\" , a . title ()) print ( \"b.title():\" , b . title ()) print ( \"a.upper():\" , a . upper ()) print ( \"b.upper():\" , b . upper ()) print ( \"a.lower():\" , a . lower ()) print ( \"b.lower():\" , b . lower ()) print ( \"a.capitalize():\" , a . capitalize ()) print ( \"b.capitalize():\" , b . capitalize ()) Output a.title(): 10 b.title(): Apple Is Apple. How About Pineapple a.upper(): 10 b.upper(): APPLE IS APPLE. HOW ABOUT PINEAPPLE a.lower(): 10 b.lower(): apple is apple. how about pineapple a.capitalize(): 10 b.capitalize(): Apple is apple. how about pineapple Function useage title() Capitalize first letter of all word capitalize() Capitalize first letter of first word upper() Capitalize all lower() Lower all center(arg) text locate center of arg(int) ljust(arg) text adjust to the left of arg(int) rjust(arg) text adjust to the right of arg(int) split(arg) split str to list by arg(str) rsplit(arg) split str to list by arg(str) from right join(arg) join list to String by arg count(arg) count how many times arg(String) appear in String zfill(arg) fill zero by len of arg(int) strip(arg) remove arg(String) from two sides lstrip(arg) remove arg(String) from left sides rstrip(arg) remove arg(String) from right sides index() find index of a charater(from left), if not found return ValueError rindex() find index of a charater(from right), if not found return ValueError find() find String, if not found return -1 rfind() find String, if not found return -1(from right) replace() Replace the given String startswith() See if a String start with the given attribute(T/F) endswith() See if a String ends with the given attribute(T/F)","title":"Python Level - Beginner"},{"location":"python_1/#learn-datatypes","text":"There are three data types in Python Types Description int Int, short for integer. Whole number, any number without decimal point. float Floating-point numbers with up to 17 decimal points. str Str, String, words in general. Written inside quote. boolean True or False. Often use as a switch. Tip Learn the basics, but don't be scared to explore. Coding is all about exploring","title":"Learn Datatypes"},{"location":"python_1/#string-and-print","text":"","title":"String and Print"},{"location":"python_1/#1-basics","text":"Code 1 2 3 4 5 6 print ( \"Hello world\" ) print ( \"My\" ) print ( \"Name\" ) print ( \"Is\" ) print () print ( \"Bob\" ) Output Hello world My Name Is Bob Note print() is used to display messages","title":"#1 Basics"},{"location":"python_1/#2-adding-string","text":"Code 1 2 print ( \"Hello\" + \" world\" ) print ( \"Hello\" , \"world\" ) Output Hello world Hello world Note \",\" and \"+\" and combine two string together.","title":"#2 adding string"},{"location":"python_1/#3-backslash","text":"Code 1 2 3 4 5 print ( \"Hello, world\" ) print ( 'Hello, world' ) print ( \"What's up\" ) print ( 'What \\' s up' ) print ( ' \\\\ ' ) Output Hello, world Hello, world What's up What's up \\ Note Double quote(\"\") and Single quote('') both work. Backslash is called an escape character. Computer will escape the next charater when backslash is used.","title":"#3 Backslash"},{"location":"python_1/#4-backslash-n","text":"Code 1 2 3 4 5 print ( \"Hello, \\n world\" ) print ( 'Hello, \\t world' ) print ( 'Hello, \\b world' ) print ( \" \\n \" ) print ( \" \\\\\\\\ \" ) Output Hello, world Hello, world Hello,world \\\\ Note Code Result \\n New line \\t Tab \\\\ Backslash \\b Backspace","title":"#4 Backslash-n"},{"location":"python_1/#numbers-and-calculations","text":"","title":"Numbers and Calculations"},{"location":"python_1/#1-","text":"Code 1 2 3 4 5 print ( 2 + 2 ) print ( 2 - 2 ) print ( 2 * 2 ) print ( 2 / 2 ) print ( 2 // 2 ) Output 4 0 4 1.0 1 Note Code Description + Addition - Subtraction * Multiplication / Division // Floor division ** Exponentiation % Modulus","title":"#1 (+, -, *, /)"},{"location":"python_1/#2-remainder","text":"Code 1 2 3 print ( 7 % 2 ) print ( 8 % 3 ) print ( 10 % 6 ) Output 1 2 4 Tip Follows the PEMDAS rule. 1.) P : Parentheses 2.) E : Exponents 3.) MD : Multiplication and Division 4.) AS : Addition and Subtraction Tip Using the type function can allow you know the data type of the given data.","title":"#2 Remainder"},{"location":"python_1/#5-difference-between-and","text":"Code 1 2 3 4 print ( type ( 10.0 // 2 )) print ( type ( 10 // 2 )) print ( type ( 10.0 // 3 )) print ( type ( 10 // 3 )) Output <class 'int'> <class 'int'> <class 'int'> <class 'int'>","title":"#5 difference between / and //"},{"location":"python_1/#variables","text":"So first of all, what are variables? Variable is a memory location to store datas. Think of variable as a box, and you can put any thing inside the box. You can later on call certain data by using the variable you created. Variable is a great tool to make your code look more simple.","title":"Variables"},{"location":"python_1/#1-basics_1","text":"Code 1 2 3 4 a = 10 print ( a ) b = \"10\" print ( b ) Output 10 10 Tip Good variable name is important while working in a team. Always get in a good habit of using good variable name. A good variable name needs to follow the following: Clear and Concise No special character No conflict with Python fuctions(sum, print, True...)","title":"#1 Basics"},{"location":"python_1/#2-setting","text":"Code 1 2 3 4 a = 10 print ( a ) a = \"100\" print ( a ) Output 10 100","title":"#2 setting"},{"location":"python_1/#3-calling-var","text":"Code 1 2 3 a = 10 b = 20 print ( a + b ) Output 30","title":"#3 Calling Var"},{"location":"python_1/#4-adding-value","text":"Code 1 2 3 4 5 6 a = 10 a = a + 10 b = 10 b += 10 print ( a ) print ( b ) Output 20 20 Note Code Description += Addition -= Subtraction *= Multiplication /= Division //= Floor division **= Exponentiation %= Modulus","title":"#4 Adding value"},{"location":"python_1/#5-swap","text":"Code 1 2 3 4 5 6 7 8 a = \"apple\" b = \"pineapple\" temp = b b = a a = temp print ( \"a\" , a ) print ( \"b\" , b ) Output a pineapple b apple Note the variable temp are used as a transition block.","title":"#5 Swap"},{"location":"python_1/#6-setting-multiple-var","text":"Code 1 2 3 4 a , b = \"1\" , \"2\" a , b = int ( a ), int ( b ) print ( \"a\" , type ( a )) print ( \"b\" , b ( b )) *Output a <class 'int'> b <class 'int'>","title":"#6 Setting multiple var"},{"location":"python_1/#7-swaping-value","text":"Code 1 2 3 4 a , b = 1 , 2 a , b = b , a print ( \"a\" , a ) print ( \"b\" , b ) Output a 2 b 1","title":"#7 Swaping Value"},{"location":"python_1/#math","text":"","title":"Math"},{"location":"python_1/#1-rounding","text":"Important The import function is to access to code from another module. This rounding method only treats number that ends with x.5. * Even: round down * Odd: round down Code 1 2 3 4 5 6 7 8 9 10 11 12 import math a = 10.5 b = 9.5 print ( round ( a )) print ( round ( b )) print ( \"------------\" ) print ( math . floor ( a )) print ( math . floor ( b )) print ( \"------------\" ) print ( math . ceil ( a )) print ( math . ceil ( b )) print ( \"------------\" ) Output 10 10 ------------ 10 9 ------------ 11 10 ------------ Note Banker's rounding This rounding method only treats number that ends with x.5. * Even: round down * Odd: round down","title":"#1 Rounding"},{"location":"python_1/#2-rounding-to-certain-decimal-point","text":"Code 1 2 3 4 5 6 7 8 9 10 11 12 import math divider = '-' * 30 x = 6.494949494949494949 print ( divider ) print ( 'round to int' , round ( x )) print ( 'round to 2 decimal point' , round ( x , 2 )) print ( 'round to 4 decimal point' , round ( x , 4 )) print ( 'round to 6 decimal point' , round ( x , 6 )) print ( divider ) print ( 'round up' , math . ceil ( x )) print ( divider ) print ( 'round down' , math . floor ( x )) Output ------------------------------ round to int 7 round to 2 decimal point 7.49 round to 4 decimal point 7.4934 round to 6 decimal point 7.4934 ------------------------------ round up 8 ------------------------------ round down 7","title":"#2 Rounding to certain decimal point"},{"location":"python_1/#3-remainder-vs-module","text":"Code 1 2 3 4 5 6 7 8 9 10 11 12 import math print ( 7 % 3 ) print ( math . remainder ( 7 , 3 )) print ( \"------------------------------\" print ( - 7 % 3 ) print ( math . remainder ( - 7 , 3 )) print ( \"------------------------------\" print ( 7 % - 3 ) print ( math . remainder ( 7 , - 3 )) print ( \"------------------------------\" ) print ( - 7 % - 3 ) print ( math . remainder ( - 7 , - 3 )) Output 1 1.0 2 -1.0 -2 1.0 -1 -1.0","title":"#3 Remainder vs Module"},{"location":"python_1/#4-other-functions","text":"Code 1 2 3 4 5 6 7 8 9 10 11 12 import math print ( 7 % 3 ) print ( math . remainder ( 7 , 3 )) print ( \"------------------------------\" print ( - 7 % 3 ) print ( math . remainder ( - 7 , 3 )) print ( \"------------------------------\" print ( 7 % - 3 ) print ( math . remainder ( 7 , - 3 )) print ( \"------------------------------\" ) print ( - 7 % - 3 ) print ( math . remainder ( - 7 , - 3 )) Output 1 1.0 2 -1.0 -2 1.0 -1 -1.0 Important % and math.remainder is different when one of the number are negative. x//y = math.floor(x/y) Abstract math.sqrt(a) = a ** 0.5 pow(a,b) = a ** b","title":"#4 Other Functions"},{"location":"python_1/#formating-string","text":"","title":"Formating String"},{"location":"python_1/#1-basics_2","text":"Code 1 2 3 4 5 6 7 8 x = 10 y = 9 print ( ' %s + %s = %s ' % ( x , y , x + y )) print ( ' {} + {} = {} ' . format ( x , y , x + y )) print ( ' {2} + {1} = {0} ' . format ( x + y , y , x )) print ( f ' { x } + { y } = { x + y } ' ) print ( x , \"+\" , y , \"=\" , x + y ) Output 10 + 9 = 19 10 + 9 = 19 10 + 9 = 19 10 + 9 = 19 10 + 9 = 19 Bug You can not combine String and Int together by using (+), but (,) will work. Code: 1 2 3 4 print ( 1 + \"1\" ) print ( 1 , \"1\" ) print ( \"1\" + \"1\" ) print ( 1 + 1 ) Output: TypeError 1 1 11 2","title":"#1 Basics"},{"location":"python_1/#2-basics","text":"Code 1 2 3 4 5 6 7 8 9 10 11 a = \"10\" b = \"apple iS APPLE. how about pineapple.\" print ( \"a.title():\" , a . title ()) print ( \"b.title():\" , b . title ()) print ( \"a.upper():\" , a . upper ()) print ( \"b.upper():\" , b . upper ()) print ( \"a.lower():\" , a . lower ()) print ( \"b.lower():\" , b . lower ()) print ( \"a.capitalize():\" , a . capitalize ()) print ( \"b.capitalize():\" , b . capitalize ()) Output a.title(): 10 b.title(): Apple Is Apple. How About Pineapple a.upper(): 10 b.upper(): APPLE IS APPLE. HOW ABOUT PINEAPPLE a.lower(): 10 b.lower(): apple is apple. how about pineapple a.capitalize(): 10 b.capitalize(): Apple is apple. how about pineapple Function useage title() Capitalize first letter of all word capitalize() Capitalize first letter of first word upper() Capitalize all lower() Lower all center(arg) text locate center of arg(int) ljust(arg) text adjust to the left of arg(int) rjust(arg) text adjust to the right of arg(int) split(arg) split str to list by arg(str) rsplit(arg) split str to list by arg(str) from right join(arg) join list to String by arg count(arg) count how many times arg(String) appear in String zfill(arg) fill zero by len of arg(int) strip(arg) remove arg(String) from two sides lstrip(arg) remove arg(String) from left sides rstrip(arg) remove arg(String) from right sides index() find index of a charater(from left), if not found return ValueError rindex() find index of a charater(from right), if not found return ValueError find() find String, if not found return -1 rfind() find String, if not found return -1(from right) replace() Replace the given String startswith() See if a String start with the given attribute(T/F) endswith() See if a String ends with the given attribute(T/F)","title":"#2 Basics"},{"location":"python_2/","text":"Still developing! Coming soon!","title":"Python Level - Intermediate"},{"location":"python_2/#still-developing-coming-soon","text":"","title":"Still developing! Coming soon!"},{"location":"whycode/","text":"Should I code? The first thing you should ask yourself before you start learning coding is why code. A lot of people think coding is a cool subject where you can hack into other people's computers or code an entire fortnite. The thing I have to tell you first is that programming isn\u2019t an easy job, I think it is one of the hardest skills to master. The life of a computer programmer is probably different then what you saw in movies, the process of coding is repetitive and frustrating. Even though I said a lot of the downside of being a computer programmer, coding is still super fun after you learn the fundamentals. You may ask how do you prepare yourself before learning coding, there are 3 skills that you will have to be good at in order to shine. The three skills are Math, Physics, and English. You may wonder why English is important in coding, isn\u2019t coding a logic base thing? Why is it connected to english then??? You will have to read tons of documentations and post on StackOverflow to solve a single bug in your code. The ability to be able to read english is super important in my opinion, english is directly connected to self-learning. Math and Physics are the other two skills that you will have to master. Think of it this way, coding is a \u201cTOOL\u201d to solve math and physics problems. These two skill sets are more logic based, you should always practice your logic throughout the process of coding. The process of learning the basics of coding is boring, you will have to remember a lot of functions and some weird rules. These weird data types and marks will make more sense when you are getting good at it, and getting good means that you can finally THINK like a computer. The coolest part about programming all happens after you are good at it, you can do basically anything with coding. It will be very easy to learn another language once you master one, this is because their basics are the same. Overview of programming: Code = language that computer understands Programming = Data types + algorithms Front end: users interact with. Ex. Website, Application Back end: Calculations in general","title":"Why Code"},{"location":"whycode/#should-i-code","text":"The first thing you should ask yourself before you start learning coding is why code. A lot of people think coding is a cool subject where you can hack into other people's computers or code an entire fortnite. The thing I have to tell you first is that programming isn\u2019t an easy job, I think it is one of the hardest skills to master. The life of a computer programmer is probably different then what you saw in movies, the process of coding is repetitive and frustrating. Even though I said a lot of the downside of being a computer programmer, coding is still super fun after you learn the fundamentals. You may ask how do you prepare yourself before learning coding, there are 3 skills that you will have to be good at in order to shine. The three skills are Math, Physics, and English. You may wonder why English is important in coding, isn\u2019t coding a logic base thing? Why is it connected to english then??? You will have to read tons of documentations and post on StackOverflow to solve a single bug in your code. The ability to be able to read english is super important in my opinion, english is directly connected to self-learning. Math and Physics are the other two skills that you will have to master. Think of it this way, coding is a \u201cTOOL\u201d to solve math and physics problems. These two skill sets are more logic based, you should always practice your logic throughout the process of coding. The process of learning the basics of coding is boring, you will have to remember a lot of functions and some weird rules. These weird data types and marks will make more sense when you are getting good at it, and getting good means that you can finally THINK like a computer. The coolest part about programming all happens after you are good at it, you can do basically anything with coding. It will be very easy to learn another language once you master one, this is because their basics are the same.","title":"Should I code?"},{"location":"whycode/#overview-of-programming","text":"Code = language that computer understands Programming = Data types + algorithms Front end: users interact with. Ex. Website, Application Back end: Calculations in general","title":"Overview of programming:"}]}